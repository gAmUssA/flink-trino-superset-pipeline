# üöÄ Flink-Trino-Superset Pipeline Makefile

# üé® Colors for better readability
BOLD := \033[1m
GREEN := \033[32m
YELLOW := \033[33m
BLUE := \033[34m
MAGENTA := \033[35m
CYAN := \033[36m
RED := \033[31m
RESET := \033[0m

# üìã Default target
.PHONY: help
help:
	@echo "$(BOLD)$(CYAN)üöÄ Flink-Trino-Superset Pipeline$(RESET)"
	@echo "$(BOLD)$(GREEN)Available targets:$(RESET)"
	@echo "  $(YELLOW)help$(RESET)              - Show this help message"
	@echo "  $(YELLOW)build$(RESET)             - Build all components"
	@echo "  $(YELLOW)up$(RESET)                - Start all services"
	@echo "  $(YELLOW)down$(RESET)              - Stop all services"
	@echo "  $(YELLOW)clean$(RESET)             - Clean up build artifacts"
	@echo "  $(YELLOW)logs$(RESET)              - Show logs from all services"
	@echo "  $(YELLOW)smoketest$(RESET)         - Validate startup of all containers"
	@echo "  $(YELLOW)build-flink-jobs$(RESET)  - Build Flink jobs"
	@echo "  $(YELLOW)deploy-flink-jobs$(RESET) - Deploy Flink jobs to the cluster"
	@echo "  $(YELLOW)create-tables$(RESET)     - Create Iceberg tables in Trino"
	@echo "  $(YELLOW)setup-superset$(RESET)    - Set up Superset dashboards"
	@echo "  $(YELLOW)demo$(RESET)              - Run complete demo (build, start, validate, deploy)"

# üèóÔ∏è Build all components
.PHONY: build
build: build-flink-jobs
	@echo "$(BOLD)$(GREEN)üèóÔ∏è Building all components...$(RESET)"

# üöÄ Start all services
.PHONY: up
up:
	@echo "$(BOLD)$(GREEN)üöÄ Starting all services...$(RESET)"
	@if ! docker info > /dev/null 2>&1; then \
		echo "$(BOLD)$(RED)‚ùå Docker is not running!$(RESET)"; \
		echo "$(YELLOW)Please start Docker and try again.$(RESET)"; \
		exit 1; \
	fi
	docker-compose up -d

# üõë Stop all services
.PHONY: down
down:
	@echo "$(BOLD)$(GREEN)üõë Stopping all services...$(RESET)"
	docker-compose down

# üßπ Clean up build artifacts
.PHONY: clean
clean:
	@echo "$(BOLD)$(GREEN)üßπ Cleaning up build artifacts...$(RESET)"
	cd flink-jobs && ./gradlew clean
	rm -rf flink-jobs/build

# üìã Show logs from all services
.PHONY: logs
logs:
	@echo "$(BOLD)$(GREEN)üìã Showing logs from all services...$(RESET)"
	docker-compose logs -f

# üèóÔ∏è Build Flink jobs
.PHONY: build-flink-jobs
build-flink-jobs:
	@echo "$(BOLD)$(GREEN)üèóÔ∏è Building Flink jobs...$(RESET)"
	@if [ ! -f "flink-jobs/gradlew" ]; then \
		echo "$(BOLD)$(YELLOW)‚ö†Ô∏è Gradle wrapper not found, initializing...$(RESET)"; \
		chmod +x flink-jobs/init-gradle.sh && ./flink-jobs/init-gradle.sh; \
	fi
	cd flink-jobs && ./gradlew buildAllJars

# üöÄ Deploy Flink jobs to the cluster
.PHONY: deploy-flink-jobs
deploy-flink-jobs: build-flink-jobs
	@echo "$(BOLD)$(GREEN)üöÄ Deploying Flink jobs to the cluster...$(RESET)"
	@if ! docker-compose ps flink-jobmanager | grep "Up" > /dev/null; then \
		echo "$(BOLD)$(RED)‚ùå Flink JobManager is not running!$(RESET)"; \
		echo "$(YELLOW)Please start the services with 'make up' and try again.$(RESET)"; \
		exit 1; \
	fi
	@if [ ! -f "flink-jobs/build/libs/user-activity-processor-1.0-SNAPSHOT.jar" ] || [ ! -f "flink-jobs/build/libs/sensor-data-processor-1.0-SNAPSHOT.jar" ]; then \
		echo "$(BOLD)$(YELLOW)‚ö†Ô∏è Flink job JARs not found, rebuilding...$(RESET)"; \
		$(MAKE) build-flink-jobs; \
	fi
	docker cp flink-jobs/build/libs/user-activity-processor-1.0-SNAPSHOT.jar flink-jobmanager:/opt/flink/usrlib/
	docker cp flink-jobs/build/libs/sensor-data-processor-1.0-SNAPSHOT.jar flink-jobmanager:/opt/flink/usrlib/
	docker exec -it flink-jobmanager flink run -c com.example.UserActivityProcessor /opt/flink/usrlib/user-activity-processor-1.0-SNAPSHOT.jar || \
		echo "$(BOLD)$(YELLOW)‚ö†Ô∏è There was an issue deploying the UserActivityProcessor job. This might be expected if the job is already running.$(RESET)"
	docker exec -it flink-jobmanager flink run -c com.example.SensorDataProcessor /opt/flink/usrlib/sensor-data-processor-1.0-SNAPSHOT.jar || \
		echo "$(BOLD)$(YELLOW)‚ö†Ô∏è There was an issue deploying the SensorDataProcessor job. This might be expected if the job is already running.$(RESET)"

# üìä Create Iceberg tables in Trino
.PHONY: create-tables
create-tables:
	@echo "$(BOLD)$(GREEN)üìä Creating Iceberg tables in Trino...$(RESET)"
	@if ! docker-compose ps trino-coordinator | grep "Up" > /dev/null; then \
		echo "$(BOLD)$(RED)‚ùå Trino is not running!$(RESET)"; \
		echo "$(YELLOW)Please start the services with 'make up' and try again.$(RESET)"; \
		exit 1; \
	fi
	docker cp flink-jobs/create_tables.sql trino-coordinator:/tmp/
	docker exec -it trino-coordinator trino --server localhost:8080 --catalog iceberg -f /tmp/create_tables.sql || \
		echo "$(BOLD)$(YELLOW)‚ö†Ô∏è There was an issue creating tables. This might be expected if tables already exist.$(RESET)"

# üîç Validate startup of all containers
.PHONY: smoketest
smoketest:
	@echo "$(BOLD)$(GREEN)üîç Validating startup of all containers...$(RESET)"
	@echo "$(CYAN)Checking Kafka...$(RESET)"
	@docker-compose ps kafka | grep "Up" || (echo "$(BOLD)$(RED)‚ùå Kafka is not running!$(RESET)" && exit 1)
	@echo "$(GREEN)‚úÖ Kafka is running$(RESET)"
	
	@echo "$(CYAN)Checking Kafka UI...$(RESET)"
	@docker-compose ps kafka-ui | grep "Up" || (echo "$(BOLD)$(RED)‚ùå Kafka UI is not running!$(RESET)" && exit 1)
	@echo "$(GREEN)‚úÖ Kafka UI is running$(RESET)"
	
	@echo "$(CYAN)Checking Minio...$(RESET)"
	@docker-compose ps minio | grep "Up" || (echo "$(BOLD)$(RED)‚ùå Minio is not running!$(RESET)" && exit 1)
	@echo "$(GREEN)‚úÖ Minio is running$(RESET)"
	
	@echo "$(CYAN)Checking Flink JobManager...$(RESET)"
	@docker-compose ps flink-jobmanager | grep "Up" || (echo "$(BOLD)$(RED)‚ùå Flink JobManager is not running!$(RESET)" && exit 1)
	@echo "$(GREEN)‚úÖ Flink JobManager is running$(RESET)"
	
	@echo "$(CYAN)Checking Flink TaskManager...$(RESET)"
	@docker-compose ps flink-taskmanager | grep "Up" || (echo "$(BOLD)$(RED)‚ùå Flink TaskManager is not running!$(RESET)" && exit 1)
	@echo "$(GREEN)‚úÖ Flink TaskManager is running$(RESET)"
	
	@echo "$(CYAN)Checking MySQL...$(RESET)"
	@docker-compose ps mysql | grep "Up" || (echo "$(BOLD)$(RED)‚ùå MySQL is not running!$(RESET)" && exit 1)
	@echo "$(GREEN)‚úÖ MySQL is running$(RESET)"
	
	@echo "$(CYAN)Checking Hive Metastore...$(RESET)"
	@docker-compose ps hive-metastore | grep "Up" || (echo "$(BOLD)$(RED)‚ùå Hive Metastore is not running!$(RESET)" && exit 1)
	@echo "$(GREEN)‚úÖ Hive Metastore is running$(RESET)"
	
	@echo "$(CYAN)Checking Trino...$(RESET)"
	@docker-compose ps trino-coordinator | grep "Up" || (echo "$(BOLD)$(RED)‚ùå Trino is not running!$(RESET)" && exit 1)
	@echo "$(GREEN)‚úÖ Trino is running$(RESET)"
	
	@echo "$(CYAN)Checking Superset...$(RESET)"
	@docker-compose ps superset | grep "Up" || (echo "$(BOLD)$(RED)‚ùå Superset is not running!$(RESET)" && exit 1)
	@echo "$(GREEN)‚úÖ Superset is running$(RESET)"
	
	@echo "$(CYAN)Checking Data Generator...$(RESET)"
	@docker-compose ps data-generator | grep "Up" || (echo "$(BOLD)$(RED)‚ùå Data Generator is not running!$(RESET)" && exit 1)
	@echo "$(GREEN)‚úÖ Data Generator is running$(RESET)"
	
	@echo "$(BOLD)$(GREEN)‚úÖ All containers are running!$(RESET)"

# üìà Set up Superset dashboards
.PHONY: setup-superset
setup-superset:
	@echo "$(BOLD)$(GREEN)üìà Setting up Superset dashboards...$(RESET)"
	@echo "$(YELLOW)Please access Superset at http://localhost:8088 and log in with admin/admin$(RESET)"

# üé¨ Run complete demo
.PHONY: demo
demo: build up
	@echo "$(BOLD)$(MAGENTA)üé¨ Running complete data pipeline demo...$(RESET)"
	
	@echo "$(BOLD)$(CYAN)Step 1: Waiting for services to start up...$(RESET)"
	@sleep 30
	
	@echo "$(BOLD)$(CYAN)Step 2: Validating all containers are running...$(RESET)"
	@$(MAKE) smoketest
	
	@echo "$(BOLD)$(CYAN)Step 3: Creating Iceberg tables in Trino...$(RESET)"
	@$(MAKE) create-tables
	
	@echo "$(BOLD)$(CYAN)Step 4: Deploying Flink jobs...$(RESET)"
	@$(MAKE) deploy-flink-jobs
	
	@echo "$(BOLD)$(CYAN)Step 5: Waiting for data to flow through the pipeline...$(RESET)"
	@sleep 30
	
	@echo "$(BOLD)$(CYAN)Step 6: Running example queries to verify data...$(RESET)"
	@echo "$(YELLOW)Querying user activity data:$(RESET)"
	@docker exec -it trino-coordinator trino --server localhost:8080 --catalog iceberg --execute "SELECT event_type, COUNT(*) FROM warehouse.user_activity GROUP BY event_type"
	
	@echo "$(YELLOW)Querying sensor data:$(RESET)"
	@docker exec -it trino-coordinator trino --server localhost:8080 --catalog iceberg --execute "SELECT sensor_type, AVG(sensor_value) FROM warehouse.sensor_data GROUP BY sensor_type"
	
	@echo "$(BOLD)$(CYAN)Step 7: Setting up Superset dashboards...$(RESET)"
	@$(MAKE) setup-superset
	
	@echo "$(BOLD)$(GREEN)‚úÖ Demo completed successfully!$(RESET)"
	@echo "$(BOLD)$(YELLOW)You can access the following services:$(RESET)"
	@echo "  $(YELLOW)Kafka UI:$(RESET)        http://localhost:8080"
	@echo "  $(YELLOW)Minio Console:$(RESET)   http://localhost:9001 (minioadmin/minioadmin)"
	@echo "  $(YELLOW)Flink Dashboard:$(RESET) http://localhost:8081"
	@echo "  $(YELLOW)Trino UI:$(RESET)        http://localhost:8082"
	@echo "  $(YELLOW)Superset:$(RESET)        http://localhost:8088 (admin/admin)"
