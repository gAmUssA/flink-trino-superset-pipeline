services:
  # Kafka - Message broker for data ingestion in KRaft mode
  kafka:
    image: apache/kafka:3.9.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://0.0.0.0:29092,CONTROLLER://kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - pipeline-network

  # Kafka UI - Web interface for Kafka management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - pipeline-network

  # Minio - S3-compatible storage for Iceberg data
  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - pipeline-network

  # Create buckets in Minio
  mc-setup:
    image: minio/mc:latest
    container_name: mc-setup
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/warehouse;
      /usr/bin/mc policy set public myminio/warehouse;
      exit 0;
      "
    networks:
      - pipeline-network

  # Flink JobManager - Manages Flink jobs
  flink-jobmanager:
    image: flink:1.20.0-java17
    container_name: flink-jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        state.backend: filesystem
        state.checkpoints.dir: file:///opt/flink/checkpoints
        heartbeat.interval: 1000
        heartbeat.timeout: 5000
        rest.flamegraph.enabled: true
        web.upload.dir: /opt/flink/usrlib
    volumes:
      - flink-checkpoints:/opt/flink/checkpoints
      - ./flink-jobs:/opt/flink/usrlib
    networks:
      - pipeline-network

  # Flink TaskManager - Executes Flink tasks
  flink-taskmanager:
    image: flink:1.20.0-java17
    container_name: flink-taskmanager
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 4
        state.backend: filesystem
        state.checkpoints.dir: file:///opt/flink/checkpoints
        heartbeat.interval: 1000
        heartbeat.timeout: 5000
    volumes:
      - flink-checkpoints:/opt/flink/checkpoints
      - ./flink-jobs:/opt/flink/usrlib
    networks:
      - pipeline-network

  # MySQL for Hive Metastore
  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: hive
      MYSQL_PASSWORD: hive
      MYSQL_DATABASE: metastore_db
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - pipeline-network

  # Hive Metastore - Metadata repository for Iceberg
  hive-metastore:
    image: apache/hive:3.1.3
    container_name: hive-metastore
    depends_on:
      - mysql
    ports:
      - "9083:9083"
    environment:
      DB_DRIVER: mysql
      DB_HOST: mysql
      DB_NAME: metastore_db
      DB_USER: hive
      DB_PASS: hive
      HIVE_SITE_CONF_javax_jdo_option_ConnectionURL: "jdbc:mysql://mysql:3306/metastore_db?createDatabaseIfNotExist=true"
      HIVE_SITE_CONF_javax_jdo_option_ConnectionDriverName: com.mysql.cj.jdbc.Driver
      HIVE_SITE_CONF_javax_jdo_option_ConnectionUserName: hive
      HIVE_SITE_CONF_javax_jdo_option_ConnectionPassword: hive
      HIVE_SITE_CONF_hive_metastore_warehouse_dir: "s3a://warehouse/"
      HIVE_SITE_CONF_fs_s3a_endpoint: "http://minio:9000"
      HIVE_SITE_CONF_fs_s3a_access_key: minioadmin
      HIVE_SITE_CONF_fs_s3a_secret_key: minioadmin
      HIVE_SITE_CONF_fs_s3a_path_style_access: "true"
      HIVE_SITE_CONF_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
    volumes:
      - hive-data:/opt/hive/data
    command: /opt/hive/bin/hive --service metastore
    networks:
      - pipeline-network

  # Trino Coordinator - SQL query engine
  trino-coordinator:
    image: trinodb/trino:410
    container_name: trino-coordinator
    depends_on:
      - hive-metastore
    ports:
      - "8082:8080"
    volumes:
      - ./trino/etc:/etc/trino
    networks:
      - pipeline-network

  # Superset - Data visualization
  superset:
    image: apache/superset:latest
    container_name: superset
    depends_on:
      - trino-coordinator
    ports:
      - "8088:8088"
    environment:
      SUPERSET_SECRET_KEY: "your_secret_key_here"
    volumes:
      - superset-data:/app/superset_home
    networks:
      - pipeline-network

  # Superset initialization
  superset-init:
    image: apache/superset:latest
    container_name: superset-init
    depends_on:
      - superset
    command: >
      bash -c "
      superset db upgrade &&
      superset fab create-admin
        --username admin
        --firstname Superset
        --lastname Admin
        --email admin@superset.com
        --password admin &&
      superset init
      "
    environment:
      SUPERSET_SECRET_KEY: "your_secret_key_here"
    volumes:
      - superset-data:/app/superset_home
    networks:
      - pipeline-network

  # Data generator - Produces sample data to Kafka
  data-generator:
    build:
      context: ./data-generator
      dockerfile: Dockerfile
    container_name: data-generator
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - pipeline-network

networks:
  pipeline-network:
    driver: bridge

volumes:
  kafka-data:
  minio-data:
  flink-checkpoints:
  superset-data:
  mysql-data:
  hive-data:
