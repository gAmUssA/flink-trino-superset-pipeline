version: '3.8'

services:
  # ZooKeeper - Required for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    networks:
      - pipeline-network

  # Kafka - Message broker for data ingestion
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - pipeline-network

  # Kafka UI - Web interface for Kafka management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - pipeline-network

  # Minio - S3-compatible storage for Iceberg data
  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - pipeline-network

  # Create buckets in Minio
  mc-setup:
    image: minio/mc:RELEASE.2023-03-20T16-14-27Z
    container_name: mc-setup
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/warehouse;
      /usr/bin/mc policy set public myminio/warehouse;
      exit 0;
      "
    networks:
      - pipeline-network

  # Flink JobManager - Manages Flink jobs
  flink-jobmanager:
    image: flink:1.16.1-scala_2.12-java11
    container_name: flink-jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        state.backend: filesystem
        state.checkpoints.dir: file:///opt/flink/checkpoints
        heartbeat.interval: 1000
        heartbeat.timeout: 5000
        rest.flamegraph.enabled: true
        web.upload.dir: /opt/flink/usrlib
    volumes:
      - flink-checkpoints:/opt/flink/checkpoints
      - ./flink-jobs:/opt/flink/usrlib
    networks:
      - pipeline-network

  # Flink TaskManager - Executes Flink tasks
  flink-taskmanager:
    image: flink:1.16.1-scala_2.12-java11
    container_name: flink-taskmanager
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 4
        state.backend: filesystem
        state.checkpoints.dir: file:///opt/flink/checkpoints
        heartbeat.interval: 1000
        heartbeat.timeout: 5000
    volumes:
      - flink-checkpoints:/opt/flink/checkpoints
      - ./flink-jobs:/opt/flink/usrlib
    networks:
      - pipeline-network

  # Trino Coordinator - SQL query engine
  trino-coordinator:
    image: trinodb/trino:410
    container_name: trino-coordinator
    ports:
      - "8082:8080"
    volumes:
      - ./trino/etc:/etc/trino
    networks:
      - pipeline-network

  # Superset - Data visualization
  superset:
    image: apache/superset:latest
    container_name: superset
    depends_on:
      - trino-coordinator
    ports:
      - "8088:8088"
    environment:
      SUPERSET_SECRET_KEY: "your_secret_key_here"
    volumes:
      - superset-data:/app/superset_home
    networks:
      - pipeline-network

  # Superset initialization
  superset-init:
    image: apache/superset:latest
    container_name: superset-init
    depends_on:
      - superset
    command: >
      bash -c "
      superset db upgrade &&
      superset fab create-admin
        --username admin
        --firstname Superset
        --lastname Admin
        --email admin@superset.com
        --password admin &&
      superset init
      "
    environment:
      SUPERSET_SECRET_KEY: "your_secret_key_here"
    volumes:
      - superset-data:/app/superset_home
    networks:
      - pipeline-network

  # Data generator - Produces sample data to Kafka
  data-generator:
    build:
      context: ./data-generator
      dockerfile: Dockerfile
    container_name: data-generator
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - pipeline-network

networks:
  pipeline-network:
    driver: bridge

volumes:
  zookeeper-data:
  zookeeper-log:
  kafka-data:
  minio-data:
  flink-checkpoints:
  superset-data:
